// -----------  START PLUGIN SECTION -----------

apply plugin: 'java'
apply plugin: 'environments'
apply plugin: 'io.qameta.allure'

// -----------  END PLUGIN SECTION -----------


// -----------  START REPOSITORIES SECTION -----------

repositories {
    jcenter()
}

// -----------  END REPOSITORIES SECTION -----------


// -----------  START DEPENDENCIES SECTION -----------

dependencies {
    compile( 'com.google.guava:guava:20.0',
             'org.seleniumhq.selenium:selenium-java:3.11.0',
             'commons-io:commons-io:2.4',
             'junit:junit:4.12-beta-3',
             'org.slf4j:slf4j-api:1.7.2',
             'ch.qos.logback:logback-classic:1.0.9',
             'ch.qos.logback:logback-core:1.0.9'
    )

    testCompile('org.testng:testng:6.10'
    )
}

// -----------  END DEPENDENCIES SECTION -----------


// -----------  START BUILDSCRIPT SECTION -----------

// environments plugin
buildscript {
    repositories {
        flatDir {
            dirs "${rootProject.projectDir}/gradle/plugins"
        }
    }
    dependencies {
        classpath group: 'org.gradle.plugins', name: 'gradle-environments-plugin', version: '1.0'
    }
}

// allure report plugin
buildscript {

    repositories {
        jcenter()
    }

    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.3"
    }
}

// -----------  END BUILDSCRIPT SECTION -----------


// -----------  START TASK SECTION -----------

environments {
    Test {
        taskName = "refreshTestEnvironment"
        sourceDir = "./src/test/environments/"
        destinationDir = "./src/test/resources/"
        dependentTasks = ["processResources"]

        // Whether tasks for resolving environments must overwrite files that already exist
        // Default value true
        overwriteByTask = true

        // Whether tasks, dependent on resolving environments,
        // must overwrite files that already exist
        // Default value false
        overwriteByDependentTask = true

        // Whether files that already exist must be overwritten
        // during resolving environments
        // Default value false
        overwriteOnLoadPhase = true
    }
}

test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }

    useTestNG() {
        useDefaultListeners = true
        suites 'src/test/resources/testng.xml'
    }
}

allure {
    version = '2.2.1'
    autoconfigure = true
    resultsDir = file('/allure-results')
    reportDir = file('/allure-report')
}

// -----------  END TASK SECTION -----------
