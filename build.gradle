apply plugin: 'java'
apply plugin: 'environments'


repositories {
    jcenter()
}


dependencies {
    compile 'com.google.guava:guava:20.0'
    compile 'org.seleniumhq.selenium:selenium-java:3.11.0'
    compile 'commons-io:commons-io:2.4'
    compile 'junit:junit:4.12-beta-3'
    compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.2'
    compile group: 'ch.qos.logback', name:'logback-classic', version: '1.0.9'
    compile group: 'ch.qos.logback', name:'logback-core', version: '1.0.9'
    testCompile 'junit:junit:4.12'         // JUnit dependency for testing
}


buildscript {
    repositories {
        flatDir {
            dirs "${rootProject.projectDir}/gradle/plugins"
        }
    }
    dependencies {
        classpath group: 'org.gradle.plugins', name: 'gradle-environments-plugin', version: '1.0'
    }
}


environments {
    Test {
        taskName = "refreshTestEnvironment"
        sourceDir = "./src/test/environments/"
        destinationDir = "./src/test/resources/"
        dependentTasks = ["processResources"]

        // Whether tasks for resolving environments must overwrite files that already exist
        // Default value true
        overwriteByTask = true

        // Whether tasks, dependent on resolving environments,
        // must overwrite files that already exist
        // Default value false
        overwriteByDependentTask = true

        // Whether files that already exist must be overwritten
        // during resolving environments
        // Default value false
        overwriteOnLoadPhase = true
    }
}


test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }

    useJUnit {
        exclude '**/ta/testcases/*Test.class'
    }
}
