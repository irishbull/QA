// -----------  START PLUGIN SECTION -----------

apply plugin: 'java'
tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}
apply plugin: 'environments'
apply plugin: 'io.qameta.allure'

// -----------  END PLUGIN SECTION -----------


// -----------  START REPOSITORIES SECTION -----------

repositories {
    jcenter()
}

// -----------  END REPOSITORIES SECTION -----------


// -----------  START DEPENDENCIES SECTION -----------

dependencies {
    compile( 'com.google.guava:guava:20.0',
            'org.seleniumhq.selenium:selenium-java:3.11.0',
            'commons-io:commons-io:2.4',
            'org.slf4j:slf4j-api:1.7.2',
            'ch.qos.logback:logback-classic:1.0.9',
            'ch.qos.logback:logback-core:1.0.9',
            'org.testng:testng:6.10',
            'com.googlecode.json-simple:json-simple:1.1',
            'net.lightbody.bmp:browsermob-core:2.1.5',
            'org.apache.httpcomponents:httpclient: 4.5.5',
            'org.jsoup:jsoup:1.8.3'
    )

    testCompile('org.testng:testng:6.10'
    )
}

// -----------  END DEPENDENCIES SECTION -----------


// -----------  START BUILDSCRIPT SECTION -----------

// environments plugin
buildscript {
    repositories {
        flatDir {
            dirs "${rootProject.projectDir}/gradle/plugins"
        }
    }
    dependencies {
        classpath group: 'org.gradle.plugins', name: 'gradle-environments-plugin', version: '1.0'
    }
}

// allure report plugin
buildscript {

    repositories {
        jcenter()
    }

    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.3"
    }
}

// -----------  END BUILDSCRIPT SECTION -----------


// -----------  START TASK SECTION -----------

environments {
    Test {
        taskName = "refreshTestEnvironment"
        sourceDir = "./src/test/environments/"
        destinationDir = "./src/test/resources/"
        dependentTasks = ["processResources"]

        // Whether tasks for resolving environments must overwrite files that already exist
        // Default value true
        overwriteByTask = true

        // Whether tasks, dependent on resolving environments,
        // must overwrite files that already exist
        // Default value false
        overwriteByDependentTask = true

        // Whether files that already exist must be overwritten
        // during resolving environments
        // Default value false
        overwriteOnLoadPhase = true
    }
}

test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed', 'skipped', 'failed'

        // Logging the exception stack trace
        exceptionFormat 'short'
    }

    useTestNG() {
        useDefaultListeners = true
        suites 'src/test/resources/testng.xml'

        // Default browser = chrome
        def selectedBrowser = project.hasProperty('Browser') ? project.getProperty('Browser') : 'chrome'

        // Set the property selectedBrowser in systemProperty
        systemProperty "selectedBrowser", selectedBrowser
    }
}

allure {
    version = '2.2.1'
    autoconfigure = true

    def selectedBrowser = project.hasProperty('Browser') ? project.getProperty('Browser') : 'chrome'
    def environment = project.hasProperty('Env') ? project.getProperty('Env') : 'development'

    String resultsPath = "./allure-results/${selectedBrowser}"
    String reportPath = "./allure-report/${selectedBrowser}"

    // Customize resultsDir and reportDir
    resultsDir = file(resultsPath)
    reportDir = file(reportPath)


    // Copy environment.xml to resultsDir
    copy {
        from "${rootProject.projectDir}/src/test/environments/${environment}/environment.properties"
        into resultsDir
    }
}

// -----------  END TASK SECTION -----------
